# Environment Configuration Template
# Copy this file to environments/library/<your-env>.yaml and customize

# Display name for your environment
name: [Your Environment Name]

# Global command name (e.g., claude-python, claude-fullstack)
# This will be registered as a global command for easy access
command-name: claude-[your-env]

# Optional: Override the default base URL for all relative resource paths
# When set, all relative paths (agents, commands, etc.) will be resolved against this base
# Full URLs in resource lists will still take priority over this setting
# Note: {path} is automatically appended if not present
# base-url: https://raw.githubusercontent.com/my-org/my-configs/main
# Or explicitly specify where {path} should go:
# base-url: https://my-server.com/api/v2/{path}/raw

# Optional: Claude Code version configuration
# Use "latest" or a semantic version (e.g., "1.0.124", "2.0.0-beta.1")
# If not specified, installs the latest version
# Use semantic version to pin your environment for consistency
# claude-code-version: "latest"  # or "1.0.124" for specific version

# Optional: Git commit co-authorship configuration
# Whether to include co-authored-by attribution in commits
# When true, Claude Code will add 'Co-authored-by: Claude Code <...>' to commits
# Default: true
# include-co-authored-by: true

# Optional: Custom files to download/copy to specific locations
# Downloads files from URLs or copies from local paths during environment setup
# Supports cross-platform path expansion (~ for home, %USERPROFILE%, $HOME, etc.)
files-to-download:
    # Download from remote URL to specific file
    # - source: https://example.com/config.json
    #   dest: ~/.config/myapp/config.json

    # Copy from local path (relative to this config file or absolute path)
    # - source: ../shared/common-utils.py
    #   dest: ~/.local/lib/utils.py

    # Relative paths use base-url if provided
    # - source: configs/settings.json
    #   dest: ~/.config/app/settings.json

    # Directory destination (filename appended automatically)
    # - source: templates/template.md
    #   dest: ~/.templates/

    # Windows-specific path using environment variable
    # - source: scripts/helper.ps1
    #   dest: "%LOCALAPPDATA%\\Scripts\\helper.ps1"

    # Unix-specific path using environment variable
    # - source: scripts/helper.sh
    #   dest: $HOME/.local/bin/helper.sh

# Optional: Dependencies to install
# Platform-specific dependency commands that run before environment setup
dependencies:
    # Commands that run on all platforms
    common:
        # - npm install -g typescript
        # - uv tool install ruff@latest

    # Windows-specific commands
    windows:
        # - winget install Microsoft.VisualStudioCode
        # - choco install nodejs

    # macOS-specific commands
    mac:
        # - brew install node
        # - brew install python

    # Linux-specific commands
    linux:
        # - sudo apt-get update
        # - sudo apt-get install nodejs

# Optional: Agents to include
agents:
    # - agents/library/code-reviewer.md
    # - agents/library/doc-writer.md
    # - agents/library/test-generator.md

# Optional: MCP servers configuration
mcp-servers:
    # HTTP transport example
    # - name: server-name
    #   scope: user
    #   transport: http
    #   url: https://example.com/mcp
    #   header: X-API-Key: your-key-here  # Optional

    # SSE transport example
    # - name: server-sse
    #   scope: user
    #   transport: sse
    #   url: https://example.com/sse

    # Stdio transport example (local command)
    # - name: local-server
    #   scope: user
    #   command: npx some-mcp-server
    #   env: ENV_VAR=value  # Optional

# Optional: Slash commands to include
slash-commands:
    # - slash-commands/library/commit.md
    # - slash-commands/library/test.md

# Optional: Output styles
output-styles:
    # - output-styles/library/concise.md

# Optional: Hooks for automatic actions
hooks:
    # Files to download for all hooks (listed once, used by multiple events)
    files:
        # - hooks/library/your-script.py
        # - hooks/library/another-script.py

    # Hook events configuration
    events:
        # Example: Run linter on file changes
        # - event: PostToolUse
        #   matcher: Edit|MultiEdit|Write  # Regex pattern
        #   type: command
        #   command: your-script.py  # Reference the filename from 'files' section above

        # Example: Notification hook
        # - event: Notification
        #   type: command
        #   command: notify-send 'Claude Code' 'Task Complete'

# Optional: Model configuration
# Use one of the official aliases or a custom model name
# Aliases: default, sonnet, opus, haiku, sonnet[1m], opusplan
# Custom: claude-opus-4-1-20250805
# model: opus

# Optional: Claude Code environment variables
# Sets environment variables for each Claude Code session
env-variables:
    # BASH_DEFAULT_TIMEOUT_MS: "5000"
    # MAX_MCP_OUTPUT_TOKENS: "50000"
    # CLAUDE_CODE_ENABLE_TELEMETRY: "1"
    # OTEL_METRICS_EXPORTER: "otlp"

# Optional: Permissions configuration
# Controls how Claude Code interacts with your system
permissions:
    # Optional: Default permission mode
    # Options: default, acceptEdits, plan, bypassPermissions
    # defaultMode: acceptEdits

    # Optional: Explicitly allowed actions
    # allow:
    #     - WebFetch
    #     - mcp__context7__resolve-library-id, mcp__context7__get-library-docs
    #     - Bash(git diff:*)

    # Optional: Explicitly denied actions
    # deny:
    #     - WebFetch
    #     - Bash(curl:*)
    #     - Read(./.env)

    # Optional: Actions requiring confirmation
    # ask:
    #     - Bash(git push:*)

    # Optional: Additional accessible directories
    # additionalDirectories:
    #     - ../docs/
    #     - /external/project/

# Command launch configuration
command-defaults:
    # Optional: Default output style
    # References filename from 'output-styles' section above (without extension)
    # This replaces the entire system prompt with a specialized one
    # output-style: business-analyst  # Will use business-analyst.md

    # Optional: Additional system prompt
    # Use this when you want to append to Claude's default development prompt
    # system-prompt: system-prompts/library/your-prompt.md
